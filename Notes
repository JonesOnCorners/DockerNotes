Image = Application we want to run. For example NGNIX or LINUX OS etc
Container = Instance of the image running as a process.

****Basic Command****
This command will check if the NGINX image exists locally, if it does will run it, if not it will pull it from docker hub and run it on the port 80

docker container run --publish 80:80 nginx

docker container run --publish 80:80 --detach nginx (the --detach flag will run the process in the background)

****List running container****

docker container ls

docker container ls -a (list of running as well as deactivated containers)


****stop running containers****

docker container stop <containerid(available as output of ls command)>

By default each container is assigned a default name. To give a name to container you can use the --name flag while starting it

docker container run --publish 80:80 --detach --name <anyname> nginx

docker container log <name of container>

****REMOVE CONTAINER****

docker container rm <container ids separated by commas>


****Docker container inspect and check stats****
docker container top (shows process list in one container)
docker container inspect
docker container stats


****interactively login to a container****
docker container run -it --name  ubuntu ubuntu (this will actually log you into ubuntu machine)

****start a container which has been stopped****

docker container start -ai <containername> 

docker container run -it <containername> (start a new container interactively)  

docker container exec -it <containername> 
docker container exec -it <containername> (run additional commands in an existing container)

****DOCKER IMAGE TAGS****
They are just like versions where latest corresponds to the latest available stable version. We can also tag an image and reupload it.

docker pull nginx:latet (latest is the tag here)

docker image tag nginx jaydeepkarale/nginx:mytest (tage the nginx with a new tag mytest).

These essentially are the same images and will have the same image id.






